{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec\n}) {\n  React.useEffect(() => {\n    onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, false);\n    onOpenRoute({\n      route: scene.route\n    });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: scene.route\n    }, true);\n    onCloseRoute({\n      route: scene.route\n    });\n  };\n\n  const handleGestureBegin = () => {\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: scene.route\n    });\n  };\n\n  const handleGestureCanceled = () => {\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: scene.route\n    });\n  };\n\n  const handleGestureEnd = () => {\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: scene.route\n    });\n  };\n\n  const handleTransitionStart = ({\n    closing\n  }) => {\n    if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm();\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: scene.route\n    }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$; // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n\n\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, ({\n      value\n    }) => {\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3; // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return /*#__PURE__*/React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransitionStart: handleTransitionStart,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: StyleSheet.absoluteFill\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.container\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.scene\n  }, /*#__PURE__*/React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, /*#__PURE__*/React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, /*#__PURE__*/React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout,\n    insets,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default /*#__PURE__*/React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","transitionSpec","React","onPageChangeConfirm","handleOpen","onTransitionEnd","route","scene","onOpenRoute","handleClose","onCloseRoute","handleGestureBegin","onPageChangeStart","onGestureStart","handleGestureCanceled","onPageChangeCancel","onGestureCancel","handleGestureEnd","onGestureEnd","handleTransitionStart","closing","active","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","listener","value","setPointerEvents","isParentHeaderShown","isCurrentHeaderShown","headerMode","headerShown","previousScene","getPreviousScene","focused","mode","hasAbsoluteHeader","marginTop","headerHeight","backgroundColor","background","StyleSheet","absoluteFill","styles","container","renderScene","renderHeader","scenes","styleInterpolator","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleGestureBegin = () => {\n    onPageChangeStart?.();\n    onGestureStart?.({ route: scene.route });\n  };\n\n  const handleGestureCanceled = () => {\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route: scene.route });\n  };\n\n  const handleGestureEnd = () => {\n    onGestureEnd?.({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}