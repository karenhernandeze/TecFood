{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\n\nexport default function SceneView({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options\n}) {\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(r => r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n        state: child\n      }) : r)\n    }));\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: route.state,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [route.state, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, /*#__PURE__*/React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? /*#__PURE__*/React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation,\n    route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["options","navigatorKeyRef","React","getKey","addOptionsGetter","useOptionsGetters","key","route","navigation","setKey","getCurrentState","state","getState","currentRoute","r","setCurrentState","child","setState","routes","isInitialRef","getIsInitial","context","ScreenComponent","screen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      route.state,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}